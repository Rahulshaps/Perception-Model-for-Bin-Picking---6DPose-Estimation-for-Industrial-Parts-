"""
Author: Rahul Sha Pathepur Shankar, Vaishnav Raja & Reza Farrokhi Saray
CS 5330 Pattern Recognition and Computer Vision - Spring 2025 - Final Project

This code is part of the 6D pose estimation for the Industrial Plentopic Dataset (IPD)
This code provides functionality to train YOLOv11 for either object detection
on a single object dataset and this code is used to train other object also
with configurable hyperparameters and robust logging capabilities
"""

import argparse
import logging
from pathlib import Path
import torch
from ultralytics import YOLO


def train_yolo(task: str,data_path: Path,obj_id: int,epochs: int,imgsz: int,batch_size: int) -> Path:
    """
    Training YOLOv11 on a specified object class.

    Input Parameters:
        task (str): 'detection'
        data_path: Path to the dataset YAML configuration file generated by prepare_data.py
        obj_id: Class identifier for the target object.
        epochs: Total number of training epochs.
        imgsz: Training image dimension (square resolution).
        batch_size: Number of samples per mini-batch.

    Returns:
        Path: Location of the saved model checkpoint.
    """
    # Finding and setting compute device
    if torch.cuda.is_available():
        device = 'cuda'
    else:
        device = 'cpu'
    logging.info(f"Selected device: {device}")

    # Configuring the pretrained weights and suffix for the task detection or segmentation
    if task == 'detection':
        weights = 'yolo11n.pt'
        suffix = 'detection'
    elif task == 'segmentation':
        weights = 'yolo11n-seg.pt'
        suffix = 'segmentation'
    else:
        raise ValueError("Task must be detection")

    # Validating dataset YAML
    if not data_path.is_file():
        raise FileNotFoundError(f"Dataset YAML not found at {data_path}")

    # Loading model
    logging.info(f"Loading YOLO model from {weights}")
    model = YOLO(weights)

    # Setting model parameters for training 
    logging.info(f"Starting {suffix} training for object ID {obj_id}")
    
    model.train(data=str(data_path),epochs=epochs,
        imgsz=imgsz,batch=batch_size,device=device,
        workers=8,save=True)

    # Setting model parameters for inference for the trained model for each object ID 
    save_dir = Path('yolo') / 'models' / suffix / f"obj_{obj_id}"
    save_dir.mkdir(parents=True, exist_ok=True)
    output_path = save_dir / f"yolo11-{suffix}-obj_{obj_id}.pt"
    model.save(str(output_path))
    logging.info(f"Model saved at: {output_path}")

    return output_path


def parse_arguments() -> argparse.Namespace:
    """
    Parsing and returning command-line arguments
    """
    parser = argparse.ArgumentParser(description="Training YOLOv11 on a single-class dataset for detection ")
    parser.add_argument("--obj_id", type=int, required=True,help="Object ID for training (for exmample, 0).")
    parser.add_argument("--data_path", type=Path, required=True,help="Path to the YOLO dataset YAML (e.g., yolo/configs/data_obj_0.yaml).")
    parser.add_argument("--epochs", type=int, default=20,help="Number of epochs (default is 20).")
    parser.add_argument("--imgsz", type=int, default=1280,help="Image size in pixels (default is 1280).")
    parser.add_argument("--batch", type=int, default=16,help="Batch size (default is 16).")
    parser.add_argument("--task", choices=["detection", "segmentation"], default="detection",help="Task type is detection")
    return parser.parse_args()


def main():
    # Initializing logging to capture training progress and errors
    logging.basicConfig(level=logging.INFO,format='[%(asctime)s] %(levelname)s: %(message)s',datefmt='%Y-%m-%d %H:%M:%S')

    args = parse_arguments()
    
    # Starting the training process
    train_yolo(task=args.task,data_path=args.data_path,obj_id=args.obj_id,epochs=args.epochs,imgsz=args.imgsz,batch_size=args.batch)


if __name__ == '__main__':
    main()